package presentation;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Tournoi {
	private String categoriePoids;
    private Sexe sexe;
    private Niveau niveau;
    private List<Combattant> combattants;
    private List<Combat> combats;
    private List<Combattant> vainqueurs;

    public Tournoi(String categoriePoids, Sexe sexe, Niveau niveau) {
        this.categoriePoids = categoriePoids;
        this.sexe = sexe;
        this.niveau = niveau;
        this.combattants = new ArrayList<>();
        this.combats = new ArrayList<>();
        this.vainqueurs = new ArrayList<>();
    }

    public void ajouterCombattant(Combattant combattant) {
        if (combattant.getNiveau() == this.niveau && combattant.getSexe() == this.sexe) {
            boolean categorieValide = false;
            if (this.sexe == Sexe.HOMME && combattant.getCategorieDePoidsHomme() != null && combattant.getCategorieDePoidsHomme().name().equals(this.categoriePoids)) {
                categorieValide = true;
            } else if (this.sexe == Sexe.FEMME && combattant.getCategorieDePoidsFemme() != null && combattant.getCategorieDePoidsFemme().name().equals(this.categoriePoids)) {
                categorieValide = true;
            }

            if (categorieValide) {
                combattants.add(combattant);
            } else {
                System.out.println("Le combattant ne correspond pas aux critères de la catégorie de poids du tournoi.");
            }
        } else {
            System.out.println("Le combattant ne correspond pas aux critères de sexe ou de niveau du tournoi.");
        }
    }

    public void classerCombattants() {
        Map<String, List<Combattant>> combattantsClasses = new HashMap<>();
        for (Combattant combattant : combattants) {
            String categorie = (combattant.getSexe() == Sexe.HOMME ? combattant.getCategorieDePoidsHomme().name() : combattant.getCategorieDePoidsFemme().name()) + "_" + combattant.getSexe();
            combattantsClasses.putIfAbsent(categorie, new ArrayList<>());
            combattantsClasses.get(categorie).add(combattant);
        }

        // Affichage des combattants classés
        for (Map.Entry<String, List<Combattant>> entry : combattantsClasses.entrySet()) {
            System.out.println("Catégorie : " + entry.getKey());
            for (Combattant c : entry.getValue()) {
                System.out.println("  " + c.getNom() + " - " + c.getClub());
            }
        }
    }

    public void planifierCombats() {
        // Logique de planification des combats
        if (combattants.size() < 2) {
            System.out.println("Pas assez de combattants pour organiser des combats.");
            return;
        }

        // Logique de création des poules et de planification des combats
        List<Combattant> poule = new ArrayList<>();
        int pouleSize = 4;

        for (int i = 0; i < combattants.size(); i++) {
            poule.add(combattants.get(i));
            if (poule.size() == pouleSize || i == combattants.size() - 1) {
                planifierPoule(poule);
                poule.clear();
            }
        }
    }

    private void planifierPoule(List<Combattant> poule) {
        // Planifier les combats au sein de la poule
        for (int i = 0; i < poule.size(); i++) {
            for (int j = i + 1; j < poule.size(); j++) {
                combats.add(new Combat(poule.get(i), poule.get(j)));
            }
        }
    }

    public void enregistrerResultats() {
        // Logique d'enregistrement des résultats
        for (Combat combat : combats) {
            combat.simulerCombat();
            Combattant gagnant = combat.getVainqueur();
            if (gagnant != null) {
                vainqueurs.add(gagnant);
            }
        }

        // Déterminer le vainqueur final
        if (vainqueurs.size() > 1) {
            Combattant champion = organiserFinale(vainqueurs);
            System.out.println("Le champion du tournoi est : " + champion.getNom());
        } else if (vainqueurs.size() == 1) {
            System.out.println("Le champion du tournoi est : " + vainqueurs.get(0).getNom());
        } else {
            System.out.println("Aucun vainqueur déterminé.");
        }
    }

    private Combattant organiserFinale(List<Combattant> vainqueurs) {
        // Logique pour organiser la finale entre les vainqueurs des poules
        if (vainqueurs.size() < 2) {
            return null;
        }
        Combattant finaliste1 = vainqueurs.get(0);
        Combattant finaliste2 = vainqueurs.get(1);
        Combat finale = new Combat(finaliste1, finaliste2);
        finale.simulerCombat();
        return finale.getVainqueur();
    }

    public void afficherResultats() {
        // Afficher les résultats des combats
        for (Combat combat : combats) {
            System.out.println(combat.getResultat());
        }
    }

    // Getters and setters for attributes if needed
    public String getCategoriePoids() {
        return categoriePoids;
    }

    public void setCategoriePoids(String categoriePoids) {
        this.categoriePoids = categoriePoids;
    }

    public Sexe getSexe() {
        return sexe;
    }

    public void setSexe(Sexe sexe) {
        this.sexe = sexe;
    }

    public Niveau getNiveau() {
        return niveau;
    }

    public void setNiveau(Niveau niveau) {
        this.niveau = niveau;
    }

    public List<Combattant> getCombattants() {
        return combattants;
    }

    public List<Combat> getCombats() {
        return combats;
    }

    public List<Combattant> getVainqueurs() {
        return vainqueurs;
    }
}
